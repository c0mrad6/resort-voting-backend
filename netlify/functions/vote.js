// netlify/functions/vote.js
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { GoogleAuth } = require('google-auth-library');

exports.handler = async (event, context) => {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 204, headers, body: '' };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  try {
    // === 1. –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
    let body, email, nominations;
    try {
      body = JSON.parse(event.body);
      email = body.email;
      nominations = body.nominations;
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }),
      };
    }

    if (!email || !nominations || Object.keys(nominations).length === 0) {
      console.error('‚ùå –ù–µ—Ç email –∏–ª–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏–π');
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö' }),
      };
    }

    // === 2. –ü–æ–ª—É—á–µ–Ω–∏–µ IP ===
    const clientIP = event.headers['x-forwarded-for']?.split(',')[0].trim() || 
                     event.headers['x-real-ip'] || 'unknown';
    console.log('üì• IP:', clientIP);

    const now = new Date();
    const timestamp = now.toISOString();

    // === 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–µ ===
    const SHEET_ID = process.env.GOOGLE_SHEET_ID;
    const CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL;
    let PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY;

    if (PRIVATE_KEY && PRIVATE_KEY.includes('\\n')) {
      PRIVATE_KEY = PRIVATE_KEY.replace(/\\n/g, '\n');
    }

    if (!SHEET_ID || !CLIENT_EMAIL || !PRIVATE_KEY) {
      console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }),
      };
    }

    // === 4. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
    let auth, doc;
    try {
      auth = new GoogleAuth({
        credentials: { client_email: CLIENT_EMAIL, private_key: PRIVATE_KEY },
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });
      doc = new GoogleSpreadsheet(SHEET_ID, auth);
      await doc.loadInfo();
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google:', e.message);
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ' }),
      };
    }

    const votesSheet = doc.sheetsByTitle['votes'];
    const logSheet = doc.sheetsByTitle['ip_log'];

    if (!votesSheet || !logSheet) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã votes –∏–ª–∏ ip_log');
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ' }),
      };
    }

    // === 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ IP (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫) ===
    let hasVoted = false;
    try {
      const rows = await logSheet.getRows({ limit: 100 }); // ‚Üê –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ!
      const oneDayAgo = new Date(now - 24 * 60 * 60 * 1000);

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ IP: ${clientIP}`);
      console.log(`üìÖ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥: ${oneDayAgo.toISOString()}`);
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ ip_log: ${rows.length}`);

      hasVoted = rows.some(row => {
        const rowTime = new Date(row.timestamp);
        const valid = row.ip === clientIP && !isNaN(rowTime) && rowTime > oneDayAgo;
        if (valid) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –¥—É–±–ª—å: IP=${row.ip}, –≤—Ä–µ–º—è=${row.timestamp}`);
        }
        return valid;
      });
    } catch (e) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP:', e.message);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∑–∞—â–∏—Ç—ã
    }

    if (hasVoted) {
      console.log('üö´ –û—Ç–∫–∞–∑–∞–Ω–æ: —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª');
      return {
        statusCode: 403,
        headers,
        body: JSON.stringify({ error: '–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.' }),
      };
    }

    // === 6. –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ ===
    try {
      await votesSheet.addRow({
        timestamp,
        email,
        ...nominations
      });
      console.log('‚úÖ –ì–æ–ª–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ votes');
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞:', e.message);
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–ª–æ—Å' }),
      };
    }

    // === 7. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ IP ===
    try {
      await logSheet.addRow({
        ip: clientIP,
        timestamp
      });
      console.log('üìù IP –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω –≤ ip_log');
    } catch (e) {
      console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å IP:', e.message);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }

    // === 8. –£—Å–ø–µ—Ö ===
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ success: true, message: '–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!' }),
    };

  } catch (error) {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }),
    };
  }
};
